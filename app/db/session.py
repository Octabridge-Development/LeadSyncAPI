from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker, Session
from sqlalchemy.ext.declarative import declarative_base
from contextlib import contextmanager
from app.core.config import get_settings
from typing import Generator

# --- 1. Base Declarativa para Modelos SQLAlchemy ---
# Todos tus modelos de base de datos (tablas) deben heredar de 'Base'.
# Ejemplo: class Contact(Base): __tablename__ = "Contacts"
Base = declarative_base()

# --- 2. Configuraci√≥n del Motor de SQLAlchemy ---
# El 'engine' es el punto de conexi√≥n real a tu base de datos.
# Configuraciones del pool de conexiones para mejor rendimiento y estabilidad:
settings = get_settings()
engine = create_engine(
    settings.DATABASE_URL,
    echo=settings.DEBUG,     # Imprime SQL si DEBUG_MODE es True
    pool_size=20,            # Mantiene 20 conexiones abiertas y listas para usar
    max_overflow=0,          # No permite conexiones adicionales m√°s all√° de pool_size
    pool_recycle=3600,       # Recicla (cierra y reabre) conexiones cada 3600 segundos (1 hora)
                             # Esto previene problemas de timeout con la base de datos.
    connect_args={
        "timeout": 30,       # Tiempo de espera para establecer una conexi√≥n
        "prepared_statement_cache_size": 0 # √ötil para algunos entornos como Azure SQL
    }
)

# --- 3. Configuraci√≥n del Constructor de Sesiones ---
# 'SessionLocal' es una "f√°brica" que crea nuevas sesiones de base de datos.
# autocommit=False: Debes hacer commit expl√≠citamente para guardar los cambios.
# autoflush=False: Los objetos no se "flushean" autom√°ticamente a la base de datos antes de un commit.
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# --- 4. Context Manager para Sesiones de Base de Datos (Recomendado) ---
# Usa esta funci√≥n con la sentencia 'with' para garantizar que la sesi√≥n se abra
# y cierre correctamente, incluso si ocurren errores.
@contextmanager
def get_db_session() -> Generator[Session, None, None]:
    """
    Proporciona una sesi√≥n de base de datos y la cierra autom√°ticamente al finalizar.
    Asegura que se realice un rollback si ocurre alguna excepci√≥n y luego re-lanza la excepci√≥n.
    Uso: with get_db_session() as db: ...
    """
    db = SessionLocal()
    try:
        yield db  # Proporciona la sesi√≥n para que se use
    except Exception:
        db.rollback() # Si hay un error, deshace cualquier cambio pendiente
        raise       # Re-lanza la excepci√≥n original
    finally:
        db.close()  # Siempre cierra la sesi√≥n, liberando la conexi√≥n al pool

# --- 5. Funci√≥n de Utilidad para Frameworks (e.g., FastAPI) ---
# Esta funci√≥n es ideal para usarla como una "dependencia" en frameworks web.
def get_db() -> Generator[Session, None, None]:
    """
    Proporciona una sesi√≥n de base de datos para dependencias de frameworks (como FastAPI).
    La sesi√≥n se cierra autom√°ticamente despu√©s de que el endpoint ha sido procesado.
    Uso (en FastAPI): db: Session = Depends(get_db)
    """
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# --- 6. Funci√≥n para Verificar la Conexi√≥n a la Base de Datos ---
# √ötil para comprobar si tu aplicaci√≥n puede conectarse al inicio.
def check_database_connection():
    """
    Verifica la conexi√≥n a la base de datos ejecutando una consulta simple.
    Imprime el estado de la conexi√≥n.
    """
    print("\nüîÑ Intentando conectar a la base de datos...")
    try:
        with engine.connect() as connection:
            # Ejecuta una consulta simple para probar la conexi√≥n
            result = connection.execute(text("SELECT 1 AS test_connection"))
            print(f"‚úÖ ¬°Conexi√≥n exitosa! Resultado: {result.fetchone().test_connection}")
            return True
    except Exception as e:
        print(f"‚ùå Error al conectar a la base de datos: {e}")
        # Considera usar un sistema de logging aqu√≠ para errores en producci√≥n
        return False
    finally:
        print("üîö Intento de conexi√≥n finalizado.")

# --- Ejemplo de Uso (Solo para probar el archivo directamente) ---
if __name__ == "__main__":
    # 1. Comprobar la conexi√≥n al inicio
    if check_database_connection():
        print("\nLa aplicaci√≥n puede comunicarse con la base de datos.")
    else:
        print("\n¬°ADVERTENCIA! No se pudo conectar a la base de datos.")

    # 2. Ejemplo de c√≥mo usar 'get_db_session' (la forma recomendada para la mayor√≠a de las operaciones)
    print("\n--- Demostraci√≥n de 'get_db_session' ---")
    try:
        with get_db_session() as db_session:
            print("Sesi√≥n de base de datos obtenida con √©xito (get_db_session).")
            # Aqu√≠ har√≠as tus operaciones con la base de datos, por ejemplo:
            # result = db_session.execute(text("SELECT GETDATE() AS CurrentDateTime"))
            # print(f"Fecha y hora actual de la DB: {result.scalar()}")
            print("Simulando una operaci√≥n dentro de la sesi√≥n...")
            # Si se necesita un commit expl√≠cito despu√©s de cambios (INSERT, UPDATE, DELETE):
            # db_session.commit()
        print("Sesi√≥n cerrada autom√°ticamente (gracias al 'with' y 'finally').")
    except Exception as e:
        print(f"Ocurri√≥ un error al usar get_db_session: {e}")

    # 3. Ejemplo de c√≥mo usar 'get_db' (t√≠picamente en un framework web como FastAPI)
    print("\n--- Demostraci√≥n de 'get_db' (como dependencia de FastAPI) ---")
    db_generator = get_db()
    try:
        # En FastAPI, el framework llama a next(db_generator) para obtener la sesi√≥n
        db_for_fastapi = next(db_generator)
        print("Sesi√≥n de base de datos obtenida para FastAPI (get_db).")
        # Aqu√≠ usar√≠as 'db_for_fastapi' en tu endpoint de FastAPI
        print("Simulando una operaci√≥n en un endpoint de FastAPI...")
    finally:
        # FastAPI se encarga de llamar a next(db_generator) de nuevo para cerrar la sesi√≥n
        try:
            next(db_generator) # Esto ejecuta el bloque 'finally' de get_db
        except StopIteration:
            pass # Es normal que next() lance StopIteration al finalizar el generador
        print("Sesi√≥n de FastAPI cerrada autom√°ticamente.")